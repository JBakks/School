#version 330

struct DirectionalLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform DirectionalLight light1;
uniform DirectionalLight light2;
uniform vec3 viewPos;
uniform float shininess;

in vec3 FragPos;
in vec3 Normal;
in vec3 ViewDir;

out vec4 FragColor;

void main()
{
    vec3 lightDir1 = normalize(-light1.direction);
    float diff1 = max(dot(Normal, lightDir1), 0.0);
    vec3 diffuse1 = light1.diffuse * diff1;
    vec3 reflectDir1 = reflect(-lightDir1, Normal);
    float spec1 = pow(max(dot(ViewDir, reflectDir1), 0.0), shininess);
    vec3 specular1 = light1.specular * spec1;
    
    vec3 lightDir2 = normalize(-light2.direction);
    float diff2 = max(dot(Normal, lightDir2), 0.0);
    vec3 diffuse2 = light2.diffuse * diff2;
    vec3 reflectDir2 = reflect(-lightDir2, Normal);
    float spec2 = pow(max(dot(ViewDir, reflectDir2), 0.0), shininess);
    vec3 specular2 = light2.specular * spec2;

    vec3 ambient = light1.ambient + light2.ambient;
    vec3 diffuse = diffuse1 + diffuse2;
    vec3 specular = specular1 + specular2;

    FragColor = vec4((ambient + diffuse + specular), 1.0f);
}