#version 400

uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform vec3 lightDirection;
uniform float time;

in vec3 position;
in vec3 normal;
out vec3 position_worldspace;
out vec2 uv;
out vec3 normal_worldspace;

void main()
{
    // Transform vertex position to world coordinates
    position_worldspace = vec3(modelMatrix * vec4(position, 1.0));

    // Calculate UV coordinates with time-based animation
    vec2 texOffset = vec2(0.5, 0.5);
    vec2 texScale = vec2(1.0, 1.0);
    uv = (position_worldspace.xz + texOffset + (time * 0.08)) / texScale;

    // Calculate Normal
    normal_worldspace = vec3(modelMatrix * vec4(normal, 0.0));

    // Output position in world coordinates (multiplied by MVP)
    gl_Position = vec4(position_worldspace, 1);
}